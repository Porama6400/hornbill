// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/list": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/apiserver.DaemonUserEntry"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/auth.ResultErrorMessage"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/auth.ResultErrorMessage"
                        }
                    }
                }
            }
        },
        "/api/login/{server}": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "Body",
                        "name": "req",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/pb.Identity"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Server ID",
                        "name": "server",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pb.ResultAdd"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/auth.ResultErrorMessage"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/auth.ResultErrorMessage"
                        }
                    }
                }
            }
        },
        "/api/logout/{server}": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Server ID",
                        "name": "server",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pb.Result"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/auth.ResultErrorMessage"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/auth.ResultErrorMessage"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "apiserver.Daemon": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "apiserver.DaemonUserEntry": {
            "type": "object",
            "properties": {
                "daemon": {
                    "$ref": "#/definitions/apiserver.Daemon"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/pb.User"
                    }
                }
            }
        },
        "auth.ResultErrorMessage": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "pb.Identity": {
            "type": "object",
            "properties": {
                "expiry": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "privateKey": {
                    "type": "string"
                },
                "publicKey": {
                    "type": "string"
                }
            }
        },
        "pb.Result": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "ok": {
                    "type": "boolean"
                }
            }
        },
        "pb.ResultAdd": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "ok": {
                    "type": "boolean"
                },
                "serverInfo": {
                    "$ref": "#/definitions/pb.ServerInfo"
                },
                "user": {
                    "$ref": "#/definitions/pb.User"
                }
            }
        },
        "pb.ServerInfo": {
            "type": "object",
            "properties": {
                "publicAddress": {
                    "type": "string"
                },
                "publicKey": {
                    "type": "string"
                }
            }
        },
        "pb.User": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "identity": {
                    "$ref": "#/definitions/pb.Identity"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
